// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accountNumber String   @db.VarChar(255)
  routingNumber String   @db.VarChar(255)
  ownerId       Int
  owner         User     @relation(fields: [ownerId], references: [id])
}

model Loan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  categories CategoriesOnLoans[]

  @@index([content], type: BTree)
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  loans CategoriesOnLoans[]
}

//Explicit many to many relationship
model CategoriesOnLoans {
  loan       Loan     @relation(fields: [loanId], references: [id])
  loanId     Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([loanId, categoryId])
}

//One to many, child-parent relationship
model Comment {
  id     Int    @id
  Loan   Loan   @relation(fields: [loanId], references: [id]) // A comment can have one loan
  loanId Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  loans        Loan[]
  profile      Profile?
  bankAccounts BankAccount[]
}